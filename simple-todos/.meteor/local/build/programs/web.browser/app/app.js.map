{"version":3,"sources":["meteor://ðŸ’»app/client/main.jsx","meteor://ðŸ’»app/imports/api/tasks.js","meteor://ðŸ’»app/imports/startup/accounts-config.js","meteor://ðŸ’»app/imports/ui/AccountsUIWrapper.jsx","meteor://ðŸ’»app/imports/ui/App.jsx","meteor://ðŸ’»app/imports/ui/Task.jsx"],"names":[],"mappings":"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","file":"/app.js","sourcesContent":["import React from 'react';\r\nimport { Meteor } from 'meteor/meteor';\r\nimport { render } from 'react-dom';\r\n \r\nimport '../imports/startup/accounts-config.js';\r\nimport App from '../imports/ui/App.jsx';\r\n \r\nMeteor.startup(() => {\r\n  render(<App />, document.getElementById('render-target'));\r\n});\r\n","import { Meteor } from 'meteor/meteor';\nimport { Mongo } from 'meteor/mongo';\nimport { check } from 'meteor/check';\n \nexport const Tasks = new Mongo.Collection('tasks');\t \n\nif (Meteor.isServer) {\n  // This code only runs on the server\n  // Only publish tasks that are public or belong to the current user\n  Meteor.publish('tasks', function tasksPublication() {\n    return Tasks.find();\n\t return Tasks.find({\n      $or: [\n        { private: { $ne: true } },\n        { owner: this.userId },\n      ],\n    });\n  });\n}\n \nMeteor.methods({\n  'tasks.insert'(text) {\n    check(text, String);\n \n    // Make sure the user is logged in before inserting a task\n    if (! Meteor.userId()) {\n      throw new Meteor.Error('not-authorized');\n    }\n \n    Tasks.insert({\n      text,\n      createdAt: new Date(),\n      owner: Meteor.userId(),\n      username: Meteor.user().username,\n    });\n  },\n  'tasks.remove'(taskId) {\n    check(taskId, String);\n\t\n    const task = Tasks.findOne(taskId);\n    if (task.private && task.owner !== Meteor.userId()) {\n      // If the task is private, make sure only the owner can delete it\n      throw new Meteor.Error('not-authorized');\n    }\n \n    Tasks.remove(taskId);\n  },\n  'tasks.setChecked'(taskId, setChecked) {\n    check(taskId, String);\n    check(setChecked, Boolean);\n\t\n    const task = Tasks.findOne(taskId);\n    if (task.private && task.owner !== Meteor.userId()) {\n      // If the task is private, make sure only the owner can check it off\n      throw new Meteor.Error('not-authorized');\n    }\n \n    Tasks.update(taskId, { $set: { checked: setChecked } });\n  },\n    'tasks.setPrivate'(taskId, setToPrivate) {\n    check(taskId, String);\n    check(setToPrivate, Boolean);\n \n    const task = Tasks.findOne(taskId);\n \n    // Make sure only the task owner can make a task private\n    if (task.owner !== Meteor.userId()) {\n      throw new Meteor.Error('not-authorized');\n    }\n \n    Tasks.update(taskId, { $set: { private: setToPrivate } });\n  },\n});\n","import { Accounts } from 'meteor/accounts-base';\r\n \r\nAccounts.ui.config({\r\n  passwordSignupFields: 'USERNAME_ONLY',\r\n});","import React, { Component } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Template } from 'meteor/templating';\r\nimport { Blaze } from 'meteor/blaze';\r\n \r\nexport default class AccountsUIWrapper extends Component {\r\n  componentDidMount() {\r\n    // Use Meteor Blaze to render login buttons\r\n    this.view = Blaze.render(Template.loginButtons,\r\n      ReactDOM.findDOMNode(this.refs.container));\r\n  }\r\n  componentWillUnmount() {\r\n    // Clean up Blaze view\r\n    Blaze.remove(this.view);\r\n  }\r\n  render() {\r\n    // Just render a placeholder container that will be filled in\r\n    return <span ref=\"container\" />;\r\n  }\r\n}","import React, { Component, PropTypes } from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Meteor } from 'meteor/meteor';\r\nimport { createContainer } from 'meteor/react-meteor-data';\r\n\r\nimport { Tasks } from '../api/tasks.js';\r\n\r\nimport Task from './Task.jsx';\r\nimport AccountsUIWrapper from './AccountsUIWrapper.jsx';\r\n\r\n// App component - represents the whole app\r\nclass App extends Component {\r\n\t constructor(props) {\r\n    super(props);\r\n \r\n    this.state = {\r\n      hideCompleted: false,\r\n    };\r\n  }\r\n \t handleSubmit(event) {\r\n    event.preventDefault();\r\n \r\n    // Find the text field via the React ref\r\n    const text = ReactDOM.findDOMNode(this.refs.textInput).value.trim();\r\n \r\n    Tasks.insert({\r\n      text,\r\n      createdAt: new Date(), // current time\r\n\t  owner: Meteor.userId(),           // _id of logged in user\r\n      username: Meteor.user().username,  // username of logged in user\r\n    });\r\n\t\r\n      Meteor.call('tasks.insert', text);\r\n  \r\n    // Clear form\r\n    ReactDOM.findDOMNode(this.refs.textInput).value = '';\r\n  }\r\n  \r\n   toggleHideCompleted() {\r\n    this.setState({\r\n      hideCompleted: !this.state.hideCompleted,\r\n    });\r\n  }\r\n  \t\r\n  renderTasks() {\r\n\tlet filteredTasks = this.props.tasks;\r\n    if (this.state.hideCompleted) {\r\n      filteredTasks = filteredTasks.filter(task => !task.checked);\r\n    }\r\n   \treturn filteredTasks.map((task) => {\r\n      const currentUserId = this.props.currentUser && this.props.currentUser._id;\r\n      const showPrivateButton = task.owner === currentUserId;\r\n\r\n      return (\r\n        <Task\r\n          key={task._id}\r\n          task={task}\r\n          showPrivateButton={showPrivateButton}\r\n        />\r\n      );\r\n    });\r\n  }\r\n\r\n  render() {\r\n\t  \r\n    return (\r\n      <div className=\"container\">\r\n        <header>\r\n          <h1>Todo List ({this.props.incompleteCount})</h1>\r\n\t\t  \r\n\t\t  <label className=\"hide-completed\">\r\n            <input\r\n              type=\"checkbox\"\r\n              readOnly\r\n              checked={this.state.hideCompleted}\r\n              onClick={this.toggleHideCompleted.bind(this)}\r\n            />\r\n            Hide Completed Tasks\r\n          </label>\r\n\t\t  \r\n \t\t  <AccountsUIWrapper />\r\n\r\n           { this.props.currentUser ?\r\n            <form className=\"new-task\" onSubmit={this.handleSubmit.bind(this)} >\r\n              <input\r\n                type=\"text\"\r\n                ref=\"textInput\"\r\n                placeholder=\"Type to add new tasks\"\r\n              />\r\n            </form> : ''\r\n          }\r\n        </header>\r\n\t\t  \r\n         <ul>\r\n          {this.renderTasks()}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nApp.propTypes = {\r\n  tasks: PropTypes.array.isRequired,\r\n  incompleteCount: PropTypes.number.isRequired,\r\n    currentUser: PropTypes.object,\r\n\r\n};\r\n\r\nexport default createContainer(() => {\r\n\tMeteor.subscribe('tasks');\r\n\t\r\n  return {\r\n    tasks: Tasks.find({}, { sort: { createdAt: -1 } }).fetch(),\r\n\tincompleteCount: Tasks.find({ checked: { $ne: true } }).count(),\r\n\tcurrentUser: Meteor.user(),\r\n  };\r\n}, App);","import React, { Component, PropTypes } from 'react';\r\nimport { Meteor } from 'meteor/meteor';\r\nimport { Tasks } from '../api/tasks.js';\r\nimport classnames from 'classnames';\r\n\r\n\r\n// Task component - represents a single todo item\r\nexport default class Task extends Component {\r\n\t  toggleChecked() {\r\n    // Set the checked property to the opposite of its current value\r\n    Tasks.update(this.props.task._id, {\r\n      $set: { checked: !this.props.task.checked },\r\n    });\r\n\tMeteor.call('tasks.setChecked', this.props.task._id, !this.props.task.checked);\r\n  }\r\n \r\n  deleteThisTask() {\r\n    Tasks.remove(this.props.task._id);\r\n\tMeteor.call('tasks.remove', this.props.task._id);\r\n  }\r\n\t\r\n  togglePrivate() {\r\n    Meteor.call('tasks.setPrivate', this.props.task._id, ! this.props.task.private);\r\n  }\r\n\r\n \r\n  render() {\r\n\t // Give tasks a different className when they are checked off,\r\n    // so that we can style them nicely in CSS\r\n   //const taskClassName = this.props.task.checked ? 'checked' : '';\r\n    const taskClassName = classnames({\r\n      checked: this.props.task.checked,\r\n      private: this.props.task.private,\r\n    });\r\n \r\n    return ( <li className={taskClassName}>\r\n        <button className=\"delete\" onClick={this.deleteThisTask.bind(this)}>\r\n          &times;\r\n        </button>\r\n \r\n        <input\r\n          type=\"checkbox\"\r\n          readOnly\r\n          checked={this.props.task.checked}\r\n          onClick={this.toggleChecked.bind(this)}\r\n        />\r\n\t\t\r\n\t\t { this.props.showPrivateButton ? (\r\n          <button className=\"toggle-private\" onClick={this.togglePrivate.bind(this)}>\r\n            { this.props.task.private ? 'Private' : 'Public' }\r\n          </button>\r\n        ) : ''}\r\n \r\n          <span className=\"text\">\r\n          <strong>{this.props.task.username}</strong>: {this.props.task.text}\r\n        </span>\r\n      </li>\r\n    );\r\n  }\r\n}\r\n\r\nTask.propTypes = {\r\n  // This component gets the task to display through a React prop.\r\n  // We can use propTypes to indicate it is required\r\n  task: PropTypes.object.isRequired,\r\n  showPrivateButton: React.PropTypes.bool.isRequired,\r\n  };"]}