{"metadata":{"usedHelpers":["inherits","possibleConstructorReturn","classCallCheck","interopRequireDefault"],"marked":[],"modules":{"imports":[{"source":"react","imported":["default","Component","PropTypes"],"specifiers":[{"kind":"named","imported":"default","local":"React"},{"kind":"named","imported":"Component","local":"Component"},{"kind":"named","imported":"PropTypes","local":"PropTypes"}]},{"source":"meteor/meteor","imported":["Meteor"],"specifiers":[{"kind":"named","imported":"Meteor","local":"Meteor"}]},{"source":"../api/tasks.js","imported":["Tasks"],"specifiers":[{"kind":"named","imported":"Tasks","local":"Tasks"}]}],"exports":{"exported":["Task"],"specifiers":[{"kind":"local","local":"Task","exported":"default"}]}}},"options":{"filename":"/imports/ui/Task.jsx","filenameRelative":"/imports/ui/Task.jsx","env":{},"retainLines":false,"highlightCode":true,"suppressDeprecationMessages":false,"presets":[],"plugins":[[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"polyfill":false}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],{"loose":true}],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],{"allowTopLevelThis":true,"strict":false,"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],{"loose":true}],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null],[[],null]],"ignore":[],"code":true,"metadata":true,"ast":false,"comments":true,"compact":false,"minified":false,"sourceMap":true,"sourceMaps":true,"sourceMapTarget":"/imports/ui/Task.jsx.map","sourceFileName":"/imports/ui/Task.jsx","babelrc":false,"sourceType":"module","moduleIds":false,"passPerPreset":false,"basename":"Task"},"ignored":false,"code":"exports.__esModule = true;\n\nvar _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');\n\nvar _classCallCheck3 = _interopRequireDefault(_classCallCheck2);\n\nvar _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');\n\nvar _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);\n\nvar _inherits2 = require('babel-runtime/helpers/inherits');\n\nvar _inherits3 = _interopRequireDefault(_inherits2);\n\nvar _react = require('react');\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _meteor = require('meteor/meteor');\n\nvar _tasks = require('../api/tasks.js');\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\n// Task component - represents a single todo item\n\nvar Task = function (_Component) {\n  (0, _inherits3['default'])(Task, _Component);\n\n  function Task() {\n    (0, _classCallCheck3['default'])(this, Task);\n    return (0, _possibleConstructorReturn3['default'])(this, _Component.apply(this, arguments));\n  }\n\n  Task.prototype.toggleChecked = function () {\n    function toggleChecked() {\n      // Set the checked property to the opposite of its current value\n      _tasks.Tasks.update(this.props.task._id, {\n        $set: { checked: !this.props.task.checked }\n      });\n      _meteor.Meteor.call('tasks.setChecked', this.props.task._id, !this.props.task.checked);\n    }\n\n    return toggleChecked;\n  }();\n\n  Task.prototype.deleteThisTask = function () {\n    function deleteThisTask() {\n      _tasks.Tasks.remove(this.props.task._id);\n      _meteor.Meteor.call('tasks.remove', this.props.task._id);\n    }\n\n    return deleteThisTask;\n  }();\n\n  Task.prototype.render = function () {\n    function render() {\n      // Give tasks a different className when they are checked off,\n      // so that we can style them nicely in CSS\n      var taskClassName = this.props.task.checked ? 'checked' : '';\n\n      return _react2['default'].createElement(\n        'li',\n        { className: taskClassName },\n        _react2['default'].createElement(\n          'button',\n          { className: 'delete', onClick: this.deleteThisTask.bind(this) },\n          'Ã—'\n        ),\n        _react2['default'].createElement('input', {\n          type: 'checkbox',\n          readOnly: true,\n          checked: this.props.task.checked,\n          onClick: this.toggleChecked.bind(this)\n        }),\n        _react2['default'].createElement(\n          'span',\n          { className: 'text' },\n          _react2['default'].createElement(\n            'strong',\n            null,\n            this.props.task.username\n          ),\n          ': ',\n          this.props.task.text\n        )\n      );\n    }\n\n    return render;\n  }();\n\n  return Task;\n}(_react.Component);\n\nexports['default'] = Task;","ast":null,"map":{"version":3,"sources":["/imports/ui/Task.jsx"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA;;;;AACA;;AACA;;;;;;IAGqB;;;;;;;;iBAClB;6BAAgB;;AAEf,mBAAM,MAAN,CAAa,KAAK,KAAL,CAAW,IAAX,CAAgB,GAAhB,EAAqB;AAChC,cAAM,EAAE,SAAS,CAAC,KAAK,KAAL,CAAW,IAAX,CAAgB,OAAhB,EAAlB;OADF,EAFe;AAKlB,qBAAO,IAAP,CAAY,kBAAZ,EAAgC,KAAK,KAAL,CAAW,IAAX,CAAgB,GAAhB,EAAqB,CAAC,KAAK,KAAL,CAAW,IAAX,CAAgB,OAAhB,CAAtD,CALkB;;;;;;AADE,iBAUnB;8BAAiB;AACf,mBAAM,MAAN,CAAa,KAAK,KAAL,CAAW,IAAX,CAAgB,GAAhB,CAAb,CADe;AAElB,qBAAO,IAAP,CAAY,cAAZ,EAA4B,KAAK,KAAL,CAAW,IAAX,CAAgB,GAAhB,CAA5B,CAFkB;;;;;;AAVE,iBAgBnB;sBAAS;;;AAGP,UAAM,gBAAgB,KAAK,KAAL,CAAW,IAAX,CAAgB,OAAhB,GAA0B,SAA1B,GAAsC,EAAtC,CAHf;;AAKP,aAAS;;UAAI,WAAW,aAAX,EAAJ;QACL;;YAAQ,WAAU,QAAV,EAAmB,SAAS,KAAK,cAAL,CAAoB,IAApB,CAAyB,IAAzB,CAAT,EAA3B;;SADK;QAKL;AACE,gBAAK,UAAL;AACA;AACA,mBAAS,KAAK,KAAL,CAAW,IAAX,CAAgB,OAAhB;AACT,mBAAS,KAAK,aAAL,CAAmB,IAAnB,CAAwB,IAAxB,CAAT;SAJF,CALK;QAYH;;YAAM,WAAU,MAAV,EAAN;UACA;;;YAAS,KAAK,KAAL,CAAW,IAAX,CAAgB,QAAhB;WADT;;UAC8C,KAAK,KAAL,CAAW,IAAX,CAAgB,IAAhB;SAb3C;OAAT,CALO;;;;;;SAhBU","file":"/imports/ui/Task.jsx.map","sourcesContent":["import React, { Component, PropTypes } from 'react';\r\nimport { Meteor } from 'meteor/meteor';\r\nimport { Tasks } from '../api/tasks.js';\r\n\r\n// Task component - represents a single todo item\r\nexport default class Task extends Component {\r\n\t  toggleChecked() {\r\n    // Set the checked property to the opposite of its current value\r\n    Tasks.update(this.props.task._id, {\r\n      $set: { checked: !this.props.task.checked },\r\n    });\r\n\tMeteor.call('tasks.setChecked', this.props.task._id, !this.props.task.checked);\r\n\r\n  }\r\n \r\n  deleteThisTask() {\r\n    Tasks.remove(this.props.task._id);\r\n\tMeteor.call('tasks.remove', this.props.task._id);\r\n\r\n  }\r\n \r\n  render() {\r\n\t     // Give tasks a different className when they are checked off,\r\n    // so that we can style them nicely in CSS\r\n    const taskClassName = this.props.task.checked ? 'checked' : '';\r\n\t\r\n    return ( <li className={taskClassName}>\r\n        <button className=\"delete\" onClick={this.deleteThisTask.bind(this)}>\r\n          &times;\r\n        </button>\r\n \r\n        <input\r\n          type=\"checkbox\"\r\n          readOnly\r\n          checked={this.props.task.checked}\r\n          onClick={this.toggleChecked.bind(this)}\r\n        />\r\n \r\n          <span className=\"text\">\r\n          <strong>{this.props.task.username}</strong>: {this.props.task.text}\r\n        </span>\r\n      </li>\r\n    );\r\n  }\r\n}"]},"hash":"3fad0dddc56c631cb62af10f4665a6018c12787d"}
